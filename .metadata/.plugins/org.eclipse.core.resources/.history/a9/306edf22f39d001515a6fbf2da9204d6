package demz;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.mysql.jdbc.jdbc2.optional.*;
import com.notnoop.apns.APNS;
import com.notnoop.apns.ApnsService;
import com.google.maps.GeoApiContext;
import com.google.maps.GeocodingApi;
import com.google.maps.DirectionsApi;
import com.google.maps.model.DirectionsRoute;
import com.google.maps.model.GeocodingResult;

/**
 * Servlet implementation class YokweServlet
 */
@WebServlet("/YokweServlet")
public class YokweServlet extends HttpServlet {
	
	private ArrayList<Driver> drivers= new ArrayList<Driver>();
	private ArrayList<Rider> riders = new ArrayList<Rider>();
	private DatabaseController dbController = new DatabaseController();
	
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public YokweServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub

		String type = request.getParameter("type");
		String userID = request.getParameter("userID");
		String accessToken = request.getParameter("accessToken");
			
		if (type.equals("rideRequest"))
			rideHandler(request, response, userID, accessToken);
		else if (type.equals("driveRequest"))
			driveHandler(request, response, userID, accessToken);
		
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		String type = request.getParameter("type");
		String userID = request.getParameter("userID");
		String accessToken = request.getParameter("accessToken");
			
		if (type.equals("rideRequest"))
			rideHandler(request, response, userID, accessToken);
		else if (type.equals("driveRequest"))
			driveHandler(request, response, userID, accessToken);
		
		//Once a selection is made, notify the selectee, and update the DB to reflect the match
		else if(type.equals("selection")){
			selectionNotification(request.getParameter("deviceToken"), request.getParameter("mode"));
			storeMatch(userID, request.getParameter("selecteeID"));
		}
		
	}
	
	private void selectionNotification(String deviceToken, String mode){
		ApnsService service =
			    APNS.newService()
			    .withCert("/path/to/certificate.p12", "MyCertPassword")
			    .withSandboxDestination()
			    .build();
		
		String payload = APNS.newPayload().alertBody("Someone has requested a ride from you").build();
		service.push(deviceToken, payload);
		
	}
	
	private void rideHandler(HttpServletRequest request, HttpServletResponse response, String userID, String accessToken) throws ServletException, IOException {
		
		String origin = request.getParameter("origin");
		String destination = request.getParameter("destination");	
		Rider rider = new Rider(userID, accessToken, origin, destination);
		
		storeRider(rider); //Store the rider in the database
		loadDrivers(); //Load the drivers into the driver list
		
		//Prints the user IDs of the drivers to the response
		String drivers = rideMatch(rider);
		response.getWriter().print(drivers);
		
	}
	
	private void driveHandler(HttpServletRequest request, HttpServletResponse response, String userID, String accessToken) throws ServletException, IOException {
		
		String origin = request.getParameter("origin");
		String destination = request.getParameter("destination");	
		int limit = Integer.parseInt(request.getParameter("limit"));
		Driver driver = new Driver(userID, accessToken, limit, origin, destination);
		
		storeDriver(driver);
		loadRiders(); //Load the riders into the rider list
		
		//Prints the user IDs of the drivers to the response
		String riders = driveMatch(driver);
		response.getWriter().print(riders);
		
	}
	
	private void storeRider(Rider rider){
		dbController.storeRider(rider);
		
	}
	
	private void storeDriver(Driver driver){
		dbController.storeDriver(driver);
		
	}
	
	private String rideMatch(Rider rider){
		
		String returnString = "";
		
		//In order to access the API
		GeoApiContext context = new GeoApiContext().setApiKey("AIzaSyC5BL3tnMx8WrCabEGg6Ebx--f6fDraHzg");
		
		DirectionsRoute[] routes;
		long seconds;

		// For every driver in the system, check if the rider is within their
		// set limit
		for (Driver driver : drivers) {
			try {
				//Get the route distance for when the driver picks up the rider
				routes = DirectionsApi.newRequest(context).origin(driver.getOrigin())
						.destination(driver.getDestination()).waypoints(rider.getOrigin(), rider.getDestination())
						.await();

				seconds = routes[0].legs[0].duration.inSeconds + routes[0].legs[1].duration.inSeconds
						+ routes[0].legs[2].duration.inSeconds;
				
				// This is checking to see that the amount of time the driver must go out of their way
				// is less than their set limit
				if ((seconds - driver.getDuration()) <= driver.getLimit() * 60) {
					returnString += driver.getID() + "," + driver.getAccessToken() + ";";
					System.out.println(Math.ceil((seconds - driver.getDuration()) / 60));
				}

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		return returnString;
		
	}
	
	private String driveMatch(Driver driver){
		
		String returnString = "";
		
		//In order to access the API
		GeoApiContext context = new GeoApiContext().setApiKey("AIzaSyC5BL3tnMx8WrCabEGg6Ebx--f6fDraHzg");
		
		DirectionsRoute[] routes;
		long seconds;
		long addedTime;

		// For every driver in the system, check if the rider is within their
		// set limit
		for (Rider rider : riders) {
			try {
				//Get the route distance for when the driver picks up the rider
				routes = DirectionsApi.newRequest(context).origin(driver.getOrigin())
						.destination(driver.getDestination()).waypoints(rider.getOrigin(), rider.getDestination())
						.await();

				seconds = routes[0].legs[0].duration.inSeconds + routes[0].legs[1].duration.inSeconds
						+ routes[0].legs[2].duration.inSeconds;
				addedTime = seconds - driver.getDuration();
				
				// This is checking to see that the amount of time the driver must go out of their way
				// is less than their set limit
				if (addedTime <= (driver.getLimit() * 60)) {
					returnString += rider.getID() + "," + rider.getAccessToken() + "," + rider.getOrigin() + "," + rider.getDestination() + "," + Math.floor(addedTime/60) + ";";
					System.out.println(Math.floor((seconds - driver.getDuration()) / 60));
				}

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		return returnString;
		
	}
	
	private void loadDrivers(){
		
		ArrayList<Driver> driverList= new ArrayList<Driver>();
		
		try {
			
			ResultSet rs = dbController.getAllDrivers();

			while (rs.next()) {
				
				String id = rs.getString("id");
	            int limit = rs.getInt("timeLimit");
	            String origin = rs.getString("origin");
	            String destination = rs.getString("destination");
	            String accessToken = rs.getString("accessToken");

				Driver newb = new Driver(id, accessToken, limit, origin, destination);
				driverList.add(newb);
			}
			
			rs.close();
			drivers = driverList;
			System.out.println("Drivers added successfully.");

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	private void loadRiders(){
		
		ArrayList<Rider> riderList= new ArrayList<Rider>();
		
		try {
			
			ResultSet rs = dbController.getAllRiders();

			while (rs.next()) {
				
				String id = rs.getString("id");
	            String origin = rs.getString("origin");
	            String destination = rs.getString("destination");
	            String accessToken = rs.getString("accessToken");

				Rider newb = new Rider(id, accessToken, origin, destination);
				riderList.add(newb);
			}
			
			rs.close();
			riders = riderList;
			System.out.println("Riders added successfully.");

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
