package demz;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javax.sql.DataSource;

import com.mysql.jdbc.jdbc2.optional.*;

import com.google.maps.GeoApiContext;
import com.google.maps.GeocodingApi;
import com.google.maps.DirectionsApi;
import com.google.maps.model.DirectionsRoute;
import com.google.maps.model.GeocodingResult;

/**
 * Servlet implementation class YokweServlet
 */
@WebServlet("/YokweServlet")
public class YokweServlet extends HttpServlet {
	
	private ArrayList<Driver> drivers= new ArrayList<Driver>();
	
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public YokweServlet() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub

		String name = request.getParameter("name");
		int id = Integer.parseInt(request.getParameter("id"));
		String origin = request.getParameter("origin");
		String destination = request.getParameter("destination");	
		Rider rider = new Rider(id, name, origin, destination);
		
		loadDrivers();
		
		String driverNames = rideMatch(rider);
		response.getWriter().println(driverNames);
		response.getWriter().println("Done.");
		
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		
		String name = request.getParameter("name");
		int id = Integer.parseInt(request.getParameter("id"));
		String origin = request.getParameter("origin");
		String destination = request.getParameter("destination");	
		Rider rider = new Rider(id, name, origin, destination);
		
		loadDrivers();
		
		String driverNames = rideMatch(rider);
		response.getWriter().println(driverNames);
		
	}
	
	private String rideMatch(Rider rider){
		
		String returnString = "";
		
		//In order to access the API
		GeoApiContext context = new GeoApiContext().setApiKey("AIzaSyC5BL3tnMx8WrCabEGg6Ebx--f6fDraHzg");
		
		DirectionsRoute[] routes;
		long seconds;

		// For every driver in the system, check if the rider is within their
		// set limit
		for (Driver driver : drivers) {
			try {
				//Get the route distance for when the driver picks up the rider
				routes = DirectionsApi.newRequest(context).origin(driver.getOrigin())
						.destination(driver.getDestination()).waypoints(rider.getOrigin(), rider.getDestination())
						.await();

				seconds = routes[0].legs[0].duration.inSeconds + routes[0].legs[1].duration.inSeconds
						+ routes[0].legs[2].duration.inSeconds;
				
				// This is checking to see that the amount of time the driver must go out of their way
				// is less than their set limit
				if ((seconds - driver.getRouteTime()) <= driver.getLimit() * 60) {
					returnString += driver.getName() + ";";
					System.out.println(Math.ceil((seconds - driver.getRouteTime()) / 60));
				}

			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		return returnString;
		
	}
	
	private void loadDrivers(){
		
		ArrayList<Driver> driverList= new ArrayList<Driver>();
		
		try {
			
			MysqlDataSource dataSource = new MysqlDataSource();
			dataSource.setUser("demz");
			dataSource.setPassword("Iheartnewyork!1");
			dataSource.setServerName("myfirstdatabase.cgrwwpjxf5ev.us-west-2.rds.amazonaws.com");
			dataSource.setPort(3306);
			dataSource.setDatabaseName("demzdb");

			java.sql.Connection conn = dataSource.getConnection();
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("SELECT ID FROM USERS");
			// Open test file for reading
			

			// Add drivers from test.txt to an array list
			String line;
			String[] split;
			
			//Read in each driver by line from the text file
			while ((line = fileIn.readLine()) != null) {
				split = line.split(";");
				Driver newb = new Driver(Integer.parseInt(split[0]), Integer.parseInt(split[1]), split[2], split[3],
						split[4]);
				driverList.add(newb);
			}
			fileIn.close();
			
			drivers = driverList;
			
			System.out.println("Drivers added successfully.");

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
